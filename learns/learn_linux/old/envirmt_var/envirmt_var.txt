declare a		declare a variable
a=hello
$			use the variable
echo 			

RULE: the name can only be english number or underline and cannot start with num, because $+num means sys var

	如 Shell 的环境变量作用于自身和它的子进程。在所有的 UNIX 和类 UNIX 系统中，每个进程都有其各自的环境变量设置，且默认情况下，当一个进程被创建时，除了创建过程中明确指定的话，它将继承其父进程的绝大部分环境设置。
	Shell 程序也作为一个进程运行在操作系统之上，而我们在 Shell 中运行的大部分命令都将以 Shell 的子进程的方式运行。

	通常我们会涉及到的变量类型有三种：
当前Shell进程私有用户自定义变量，如上面我们创建的tmp变量，只在当前Shell中有效。
Shell本身内建的变量。
从自定义变量导出的环境变量。

????????????????????????????????????????????????????????????????????????????????
命 令 	说 明
set 	显示当前 Shell 所有变量，包括其内建环境变量（与 Shell 外观等相关），用户自定义变量及导出的环境变量。
env 	显示与当前用户相关的环境变量，还可以让命令在指定环境中运行。
export 	显示从 Shell 中导出成环境变量的变量，也能通过它将自定义变量导出为环境变量。
???????????????????????????????????????????????????????????????????????????????


vimdiff file1 file2 ...
-----------------------change the attribute of var--------------
temp=a								
echo $temp		get a					
zsh{or bash tcsh}	#创建子shell，从默认的bash切换到zsh..
echo $temp		nothing
exit
export temp		导出变量temp为环境变量
zsh
echo $temp 		get a 变量temp有效
----------------------------------------------------------------

PATH=$PATH:/home/ben/mybin		添加自定义路径到“ PATH ”环境变量

	在每个用户的 home 目录中有一个 Shell 每次启动时会默认执行一个配置脚本，以初始化环境，包括添加一些用户自定义环境变量等等。
	zsh 的配置文件是 .zshrc，相应 Bash 的配置文件为 .bashrc 。
	它们在 etc 下还都有一个或多个全局的配置文件，不过我们一般只修改用户目录下的配置文件。

echo "PATH=$PATH:/home/ben/mybin" >> .bashrc 		>>追加，>覆盖
							$PATH is a variable
source or .				. ./.bashrc使环境变量立即生效	
unset					删除环境变量
???????????????????????????????
变量设置方式 	说明
${变量名#匹配字串} 	从头向后开始匹配，删除符合匹配字串的最短数据
${变量名##匹配字串} 	从头向后开始匹配，删除符合匹配字串的最长数据
${变量名%匹配字串} 	从尾向前开始匹配，删除符合匹配字串的最短数据
${变量名%%匹配字串} 	从尾向前开始匹配，删除符合匹配字串的最长数据
${变量名/旧的字串/新的字串} 	将符合旧字串的第一个字串替换为新的字串
${变量名//旧的字串/新的字串} 	将符合旧字串的全部字串替换为新的字串
???????????????????????????????????
	搜索文件
whereis
	whereis [action]
		三个路径，两个可执行文件路径和一个 man 在线帮助文件所在路径
		它没有从硬盘中依次查找，而是直接从数据库中查询。
		whereis只能搜索二进制文件(-b)，man帮助文件(-m)和源代码文件(-s)。
locate 	
	locate /usr/share/\*.jpg
		通过“ /var/lib/mlocate/mlocate.db ”数据库查找(updatedb来更新)
		locate /etc/sh 自动递归目录，搜索jpg 需要\*.jpg
	-c	只统计数目
	-i 	忽略大小写
		whereis 的 -b、-m、-s 同样可以使用。
which
		从 PATH 环境变量指定的路径中去搜索命令，搜软件
find
	find [path] [option] [action]
	sudo find /etc/ -name interfaces
                ---------------------------------
		|option:| 			|
                ---------------------------------
		|-atime | 最后访问时间		|
		---------------------------------
		|-ctime | 最后修改文件内容的时间|
		---------------------------------
		|-mtime | 最后修改文件属性的时间|
		--------------------------------
	--------------------------------------------------------------------
	|-mtime n：	n 为数字，表示为在 n 天之前的“一天之内”修改过的文件|
	--------------------------------------------------------------------
	|-mtime +n：	列出在 n 天之前（不包含 n 天本身）被修改过的文件   |
        --------------------------------------------------------------------
	|-mtime -n：	列出在 n 天之内（包含 n 天本身）被修改过的文件	   |
        --------------------------------------------------------------------
	|-newer file：	file 为一个已存在的文件，列出比 file 还要新的文件名|
        -------------------------------------------------------------------

source.list is in /etc/apt/
##############################################################
  在linux系统普通用户目录（cd /home/xxx）或root用户目录（cd /root）下，用指令ls -al可以看到4个隐藏文件，

    .bash_history   记录之前输入的命令

    .bash_logout    当你退出时执行的命令

    .bash_profile    当你登入shell时执行

    .bashrc             当你登入shell时执行

      请注意后两个的区别：'.bash_profile'只在会话开始时被读取一次，而'.bashrc'则每次打开新的终端时，都要被读取。

      这些文件是每一位用户对终端功能和属性设置，修改.bashrc可以改变环境变量PATH、别名alias和提示符。
############################################################


